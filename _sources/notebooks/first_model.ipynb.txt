{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A first model\n",
    "\n",
    "After you have successfully installed IESopt, you can start to build your first model. In this tutorial, we will show you how to create a simple model, solve it, and extract some basic results.\n",
    "\n",
    "Let's start by creating a Python file, e.g. `main.py`, to hold the necessary code, and add the following lines:\n",
    "\n",
    "```python\n",
    "import iesopt\n",
    "\n",
    "# Load and solve a model.\n",
    "model = iesopt.run(\"my_first_model.iesopt.yaml\")\n",
    "\n",
    "print(\"Objective value:\", model.objective_value)\n",
    "```\n",
    "\n",
    "Next we'll describe a simple model that we would like to solve and set various parameters. Create an empty file `my_first_model.iesopt.yaml` (later on multiple files can be combined to describe more complex models), that we can now use to actually describe the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model configuration\n",
    "\n",
    "The first part of each `*.iesopt.yaml` file describes general configuration parameters. Add the following lines:\n",
    "```yaml\n",
    "config:\n",
    "  optimization:\n",
    "    problem_type: LP\n",
    "    snapshots:\n",
    "      count: 24\n",
    "```\n",
    "This tells IESopt to start building a model, while expecting all formulations to be representable as LP (so, adding binary\n",
    "variables will cause an error). Further we specify how many time steps (called `Snapshot`) we'd like to use, here telling IESopt that we are looking to optimize a full day (by the default a `Snapshot`'s duration is one hour)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Energy carriers\n",
    "\n",
    "Since IESopt is a general purpose energy system model, it does not restrict you to a set of predefined types of energy, but\n",
    "rather expects you to first define those. For our first model, we'll only care about electricity and gas, so we add\n",
    "the following lines:\n",
    "\n",
    "```yaml\n",
    "carriers:\n",
    "  electricity: {}\n",
    "  gas: {}\n",
    "```\n",
    "The `{}` represents an empty dictionary. Additional parameters related to the carrier could later be specified there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model components\n",
    "\n",
    "Now that all general settings of the model are in place, we can actually start describing the model's structure:\n",
    "\n",
    "- A `photovoltaic` (a `Profile`) system is feeding in electricity (based on some external availability factor) into a local electricity grid (a `Node` called `elec_grid`)\n",
    "- A simple `storage` is connected (via a `Connection`) to this grid, able to shift energy between time steps\n",
    "- An endogenous `demand` (electricity) must be met at every time step\n",
    "- Any uncovered demand (by PV or storage) can be satisfied using a `gasturbine` (a `Unit`), that draws gas from a `gas_grid`, that\n",
    "  needs to buy all used gas from a `gas_market`\n",
    "\n",
    "We now describe these seven components, starting with the electricity grid `Node`. Add the following lines to\n",
    "`my_first_model.iesopt.yaml` - everything after a `#` is considered a comment by IESopt:\n",
    "```yaml\n",
    "components:\n",
    "  elec_grid:                # the unique name of this component\n",
    "    type: Node              # the type of this component\n",
    "    carrier: electricity    # this (Node-specific) parameter fixes the carrier to be electricity\n",
    "```\n",
    "\n",
    "> Head over to [this section of the docs](https://ait-energy.github.io/iesopt/pages/manual/yaml/core_components.html) to read up on the different component types that are available.\n",
    "\n",
    "We add the other two `Node`s, making sure, that the `storage` is stateful (models a \"state of charge\"), and that the\n",
    "`gas_grid` has the proper carrier. Make sure that you do get the correct indent, since all of the following lines still\n",
    "belong to the overall `components:` definition:\n",
    "\n",
    "```yaml\n",
    "  gas_grid:                 # the unique name of this component\n",
    "    type: Node              # the type of this component\n",
    "    carrier: gas            # this (Node-specific) parameter fixes the carrier to be electricity\n",
    "\n",
    "  storage:\n",
    "    type: Node\n",
    "    carrier: electricity\n",
    "    has_state: true         # this allows this Node to have an \"internal state\"\n",
    "    state_lb: 0             # the state can not drop below 0\n",
    "    state_ub: 50            # a maximum of 50 electricity can be stored\n",
    "```\n",
    "\n",
    "Two important things can be seen with the `storage`:\n",
    "1. Values in IESopt do not carry an explicit unit (at the moment, this will be possible in the future). This means, that if\n",
    "   we consider electricity to be in kW/kWh in this model, we need to make sure that all settings are adjusted to match that.\n",
    "2. We are implicitly using a default setting of a parameter that we did not specify: `state_cyclic` (check it out in the docs!) is set to `eq` per default, forcing the model to always end the optimization with as much \"charge\" in the storage as it started with in the first time step (however, how much that is, is left to the optimizer to decide).\n",
    "\n",
    "Now that we have all `Node`s in place, we can insert the only `Connection` by adding:\n",
    "```yaml\n",
    "  conn:\n",
    "    type: Connection\n",
    "    node_from: elec_grid    # energy flows from HERE\n",
    "    node_to: storage        # to THERE\n",
    "    capacity: 15            # with a maximum capacity of +-15 units of electricity\n",
    "```\n",
    "\n",
    "Notice that while we did specify the `Node`s that are connected by this `Connection`, no energy\n",
    "carrier was explicitly set. This is due to the fact that `Connection`s infer the energy carrier and will automatically fail if they\n",
    "connect two `Node`s with a different type of energy. The specified `capacity` therefore refers to 15 units of electricity\n",
    "and constructs symmetric bounds on the flow (again, read up in the docs for other options and asymmetric bounds).\n",
    "\n",
    "Next, it's time to add all three `Profile`s to the model. A `Profile` allows for the \"creation\" or \"destruction\" of energy:\n",
    "Normally, all energy needs to move through the model (possibly being transformed), but can not enter/leave the model. This\n",
    "is where `Profile`s help, representing for example the cost of buying gas (`gas_market`) or a fixed demand that needs to\n",
    "be covered (`demand`).\n",
    "\n",
    "We now add:\n",
    "```yaml\n",
    "  demand:\n",
    "    type: Profile           # the type is now \"Profile\"\n",
    "    carrier: electricity\n",
    "    value: 5                # this models a fixed demand of 5 units of electricity during every Snapshot\n",
    "    node_from: elec_grid    # this tells MFC that this Profile draws energy from \"elec_grid\"\n",
    "\n",
    "  # We can also set the \"value\" of a Profile to a time series, as can be seen:\n",
    "  photovoltaic:\n",
    "    type: Profile\n",
    "    carrier: electricity\n",
    "    value: [0,0,0,0,0,1,2,3,4,5,8,12,12,12,8,5,4,3,2,1,0,0,0,0]\n",
    "    node_to: elec_grid      # now feeding INTO \"elec_grid\"\n",
    "\n",
    "  gas_market:\n",
    "    type: Profile\n",
    "    carrier: gas\n",
    "    mode: create            # this changes the mode from the default (\"fixed\") to \"create\"\n",
    "    cost: 100               # this specifies the \"cost of gas\"\n",
    "    node_to: gas_grid\n",
    "```\n",
    "\n",
    "> Note on setting `Profile` values: While the value of a `Profile` can be set directly in the `*.iesopt.yaml` file, most of the time this will just result in a convoluted file. It's therefore possible to load external data files (in CSV format) and directly link to them using a simple `column@filename` syntax, that can be seen in other examples.\n",
    "\n",
    "While the first two `Profile`s should be mostly self-explanatory, the `gas_market` introduces a new concept: While\n",
    "standard `Profile`s always consider a fixed value (a time series), some time series may not be exogenous, e.g. how\n",
    "much gas is bought from the gas market. That's where the `mode: create` setting helps by defining a `Profile` that can\n",
    "freely choose (as long as the value is >= 0) how much gas is being bought, but associates every unit of gas with a cost\n",
    "that has to be \"paid\" (this is therefore automatically inserted into the objective function).\n",
    "\n",
    "The only thing missing from the model description is the `Unit` (`gas_turbine`). It takes gas as its only input and\n",
    "transforms that into electricity. For this we first add the following component:\n",
    "\n",
    "```yaml\n",
    "  gasturbine:\n",
    "    type: Unit\n",
    "    inputs: {gas: gas_grid}\n",
    "    outputs: {electricity: elec_grid}\n",
    "    conversion: 1 gas -> 0.40 electricity\n",
    "    capacity: 100 out:electricity\n",
    "```\n",
    "\n",
    "Let's look at the `Unit`-specific settings in detail:\n",
    "\n",
    "- `inputs: {gas: gas_grid}`: This tells IESopt that an input accepting `gas` (the carrier) is connected to `gas_grid` (= it is\n",
    "  consuming gas from there).\n",
    "- Similarly, `outputs: {electricity: elec_grid}` tells IESopt where the only output (with carrier `electricity`) feeds energy to.\n",
    "- The most important part is kept in the so-called \"conversion expression\" `conversion: 1 gas -> 0.40 electricity`: This\n",
    "  tells IESopt that the `Unit` will use 1 unit of gas (e.g. kWh, MJ, ...) and convert it into 0.4 units of electricity\n",
    "  (e.g. kWh) at a fixed rate.\n",
    "- Finally, `capacity: 100 out:electricity` specifies the \"capacity limitations\" of this `Unit`: 100 units of electricity can\n",
    "  be produced. This implicitly limits the maximum amount of gas that can be used during a time step to 250 units of gas.\n",
    "\n",
    "`Unit`s come with a lot of additional (and very specific) parameters (e.g. `marginal_cost`, `availability`, ...) that are\n",
    "explained in detail in the specific section of the docs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Final config file\n",
    "\n",
    "Following the above steps you should now have your `my_first_model.iesopt.yaml` config file setup like this:\n",
    "\n",
    "```yaml\n",
    "config:\n",
    "  optimization:\n",
    "    problem_type: LP\n",
    "    snapshots:\n",
    "      count: 24\n",
    "\n",
    "carriers:\n",
    "  electricity: {}\n",
    "  gas: {}\n",
    "\n",
    "components:\n",
    "  elec_grid:                # the unique name of this component\n",
    "    type: Node              # the type of this component\n",
    "    carrier: electricity    # this (Node-specific) parameter fixes the carrier to be electricity\n",
    "\n",
    "  gas_grid:                 # the unique name of this component\n",
    "    type: Node              # the type of this component\n",
    "    carrier: gas            # this (Node-specific) parameter fixes the carrier to be electricity\n",
    "\n",
    "  storage:\n",
    "    type: Node\n",
    "    carrier: electricity\n",
    "    has_state: true         # this allows this Node to have an \"internal state\"\n",
    "    state_lb: 0             # the state can not drop below 0\n",
    "    state_ub: 50            # a maximum of 50 electricity can be stored    \n",
    "   \n",
    "  conn:\n",
    "    type: Connection\n",
    "    node_from: elec_grid    # energy flows from HERE\n",
    "    node_to: storage        # to THERE\n",
    "    capacity: 15            # with a maximum capacity of +-15 units of electricity\n",
    "\n",
    "  demand:\n",
    "    type: Profile           # the type is now \"Profile\"\n",
    "    carrier: electricity\n",
    "    value: 5                # this models a fixed demand of 5 units of electricity during every Snapshot\n",
    "    node_from: elec_grid    # this tells MFC that this Profile draws energy from \"elec_grid\"\n",
    "\n",
    "  # We can also set the \"value\" of a Profile to a time series, as can be seen:\n",
    "  photovoltaic:\n",
    "    type: Profile\n",
    "    carrier: electricity\n",
    "    value: [0,0,0,0,0,1,2,3,4,5,8,12,12,12,8,5,4,3,2,1,0,0,0,0]\n",
    "    node_to: elec_grid      # now feeding INTO \"elec_grid\"\n",
    "\n",
    "  gas_market:\n",
    "    type: Profile\n",
    "    carrier: gas\n",
    "    mode: create            # this changes the mode from the default (\"fixed\") to \"create\"\n",
    "    cost: 100               # this specifies the \"cost of gas\"\n",
    "    node_to: gas_grid\n",
    "\n",
    "  gasturbine:\n",
    "    type: Unit\n",
    "    inputs: {gas: gas_grid}\n",
    "    outputs: {electricity: elec_grid}\n",
    "    conversion: 1 gas -> 0.40 electricity\n",
    "    capacity: 100 out:electricity\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Running the optimization\n",
    "\n",
    "Assuming that both `my_first_model.iesopt.yaml` and `main.py` are located in the same folder, you can now execute the following\n",
    "command there (make sure you are in the correct Python environment):\n",
    "\n",
    "```shell\n",
    "python ./main.py\n",
    "```\n",
    "\n",
    "The output should show a total objective value of `9500`, resulting from `38` units of electricity missing after\n",
    "accounting for PV production, amounting to a total need of `95` units of gas, at a price of `100`.\n",
    "\n",
    "> Note on startup time: If you are running this for the first time, you might notice a considerable delay before the\n",
    "  output is shown. This is due to the fact that IESopt is automatically connecting to the internal \"core\" (which is written in Julia) and updating it. This can\n",
    "  be avoided by running the `import iesopt` command once and then just iterating on the generate/optimize part, in a \"REPL-style\" approach. Remember: Interactively executing a line or block of code in VSCode is usually bound to `Shift + Enter`.\n",
    "\n",
    "## Extracting model results\n",
    "\n",
    "Now, head over to the [extracting results](https://ait-energy.github.io/iesopt/notebooks/custom_results_1.html) tutorial, to get started with extracting actually results from your model."
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
